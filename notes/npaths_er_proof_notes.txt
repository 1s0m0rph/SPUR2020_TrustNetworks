Let S'_i^d be the set {u|distance_ignoring_s(s_i,u) = d} where distance_ignoring_s(u,v) gives the shortest path distance from u to v in the graph, ignoring the node labeled "s"
Let T'_i^d be the set {u|distance_ignoring_t(t_i,u) = d}

essentially, what T'_i and S'_i describe are trees rooted at each s_i and t_i that are not necessarily disjoint. To construct S_i and T_i, we use the following procedure:

for all nodes u st u in S'_i1...S'_ik, choose l in [1..k] uniformly at random and add u to S_il (random tiebreak)

alt:
	for all nodes u st u in S'_i1...S'_ik with k > 1, drop u from the graph entirely (eliminate-intersect)
	
some things need to be proven:
	for each d in 1..Theta(log(n)), all trees almost certainly add at least one unique node
	and
	the size of the sets S_i^d = sqrt(n) + eps for d = 1 + (1+eps)/2 * log n / log np
	and
	the probability that any two S_i^d,T_j^d have empty intersection goes to zero as n->inf

1. for each d in 1..Theta(log(n)), all trees almost certainly add at least one unique node
	
	certainly, for small k it's reasonable to say that a naive B_k(s_i) is disjoint for every i (clearly, it is for i=1, and in expectation it is for i=2 for sufficiently large graphs and so on)
	
	the number of (not necessarily unique) new nodes added on each time in total to all of the trees is kh^d where d is the current distance from s_i in tree S_i
	
	we take a certain S_i and ask ourselves, among the kh^d new nodes, how many might we expect to intersect with some S_j at this distance?
		If we assume that it's essentially a uniform random probability for each node that it's also in another tree at this layer, then we would have a total of: (kh^d)/(kh-1) in expectation (number of nodes divided by number of other trees)
		since kh is relatively large, we can approximate this as kh^(d-1)
	
	this leaves us with a total of kh^d - kh^(d-1) new and unique vertices, assuming we simply drop out all intersecting ones, which increases as a function of d. Thus, we do expect to add on some number of unique vertices for each tree at each distance

2. the size of the sets S_i^d = n^((1+eps)/2) for d = 1 + (1+eps)/2 * log n / log np
	I think the lecture notes argument works almost just straight up, but I'm not really sure how to apply it exactly...
	
3. the probability that any two S_i^d,T_j^d have empty intersection goes to zero as n->inf
	
	we know that the size of each S_i^d and T_j^d is n^((1 + eps)/2)
	
	If we assume that the probability of any node being in both S_i^d and T_j^d is uniform, then the argument from the lecture notes applies. i.e.:
	
		Pr(S_i^d intersect T_j^d = empty) leq (1 - (n^((1+ eps)/2))/n)^(n^((1+ eps)/2))) leq e^(-n^eps)
	
	union-bounding over all deg(s) * deg(t) pairs of S_i^d, T_j^d gives us that the probability that any one pair has empty intersection is bounded by
		
		deg(s) * deg(t) * e^(-n^eps)
		
	which even for the sparsest of (connected ER) graphs is at worst
	
		(log n)/(log np))^2 * e^(-n^eps)
	
	which tends to zero as long as eps > 0

	thus, we can assume that the bipartite graph on these sets is fully connected. Thus, there must be exactly min(deg s, deg t) vd paths between s and t, in expectation