def currency network:
	nodes are people
	an edge (u,v) exists between nodes u and v iff u gives currency guaranty to v
	w: E -> RR the weight function describes the amount of guaranty between edges (essentially the amount of money one person gurantees another)

central questions:
	how does money transfer work? (node a wants to transfer n units of currency to node b, how do they do this?)
	
		It's likely that node a has currency guaranteed from many different people in the network, so some algorithm will pick whose currency a uses in the transfer (this they must agree with b on somehow).
		This figured out, the actual transfer can take place. from here we'll assume it all comes from one guarantor c (wlog because this can just be repeated for all sources of guaranty):
			b verifies that a has n units of currency guaranteed by c
				this is done by b first retrieving c's public key, then initiating a dialogue in which c verifies that a owns at least n units of c's guaranty in c's ledger
			a sends a message to c (they can get the public key from b and verify it on their guaranty certificates) asking to transfer n units of c's currency to b (c can verify that it is a asking because a's signature is on c's guarantor certs)
			c performs the transfer after verifying it with b and sends along a guaranty certificate for b's ledger
			
		in network terms, when a transfers n units of c's currency to b, the weight function does this:
			original:
				w(c,a) = m >= n
				w(c,b) = k >= 0
				
			post-transaction:
				w(c,a) = m - n >= 0
				w(c,b) = k + n >= n
		
		
		something of a dichotomy occurs here: either a or c can, depending on the configuration of this transfer, screw things up by not doing what they're supposed to. In this configuration, c can fail to change their ledger to show that b owns the currency. In configurations where c does not have the ledger, a can try to use the currency twice. How to solve?
		
			One option which has come up before is the notion of a chain of transactions -- every time this currency is transferred from owner to owner they have to make a transfer-of-currency certificate. This still seems like a (or the node before it in the chain) could try to reuse the currency later though
			
			Another option would be to require (in order for transactions to be considered valid) c to maintain a record of all signed transactions as a part of its ledger and for that ledger to be publicly available. For each version of the ledger, b can sign off on it (that is, the entire ledger [or a blockchained version of it] so nothing before that point in the ledger can be changed without changing the validity of it) if it is changed in the way they expect to show the transaction from a to b. this means that any new b' that comes along can verify that a does not in fact own those units anymore because c's public ledger shows them as having been transferred to b.
				small problem with this is that transactions are deanonymized (because the name/pubk of the transactees need to be written in the ledger)
				if we blockchain c's ledger, we might have an easier time with anonymous transfers since all that needs to be done for a new transferee to verify c's integrity is to verify that blockchain with b
				
				basically the problem with even this idea is that c can always delete the last item in their ledger (not anything in the middle because of blockchain stuff) and no one would really know any better. This probably gets into the idea of "proof of *" where here * could be trust or something
				
			Any time we go with the option of c (or anyone else) keeping track of things with a ledger, the system necessarily loses some degree of anonymity (not to mention that it makes things more complicated -- think of the difference in ease of transfer between these currencies and physical US dollars). What if we didn't bother to secure this -- that is, we allow double spending?
			
				Obviously, we can't allow anything more than *double*, but if we assume it's possible to detect double spending on the part of a, then we can levy serious consequences for a. The obvious option is to kick a off the network and levy consequences for anyone associated with a (either by neighbor-linking or by devaluing a's currency). Another option is to devalue *c*'s currency in such a way that the double-spend doesn't get a anything useful. In the trust metaphor, c's currency becomes less trusted because it was used by someone to double-spend. This would motivate any such c to cut all ties with a in an attempt to cut their losses.
				
				how do we detect double-spends?
					
					one (expensive) option is to just ping the network whenever a unit of c's currency is going to be spent. If no one disputes the spending of those units, the transaction may continue, if they are disputed [someone else also owns those units], the transaction is flagged as a double spend. The problem with this is that we don't know who did the duplication: the disputer or the spender. I don't think there's any way to detect who involved did the duplication without de-anonymizing the network, so as long as that's a priority the only viable method that seems to exist here is devaluing c's currency.
					
			
	how is new currency created?
		
		When the network is used to share a public key, every node along every disjoint path that is *actually* used to transfer the keys is given a guaranty from both s and t (if the share was between them). If there are n such nodes in the paths, s and t both guaranty 0.5/n currency to each node in the path. Thus, if a (in fact: the only) path involves only one intermediate node, that node gets a payout of 1 (0.5 from s, 0.5 from t). This encourages shorter paths (more payout for individuals if the path is shorter, assuming individuals are greedy), which is good for s and t
	
	can currency be destroyed?
	
		It might make sense for currency to be destroyed in limited circumstances. If w(x,y) = n and y wants to buy something from x that they agree is worth n of x's currency, we could simply perform the following weight transfer:
			initial:
				w(x,y) = n
			post-transaction:
				w(x,y) = 0 (destroyed n units of x's currency)
		
		This is as opposed to x paying y with other people's currencies
		
		alternatively, certain graph motifs (particularly 3-node motifs) may lead to this naturally. If, by means of an exchange from y to z having happened, a reciprocated edge between x and z is created, currency along those edges can simply be reduced (by agreement between x and z) until there is no reciprocated edge (at least one of the edges reaches zero weight)
		
		

----------------------------------

In an ideal network, we won't deanonymize any member of the transaction. It seems like we have to, however, in order to detect/prevent double-spends. Is that really the case? If not, how do we detect double-spends without deanonymizing a or b?

option a: one spend per unit of currency:
	a makes the request to c to transfer units of currency which they have certificates for over to b (this doesn't have to deanonymize a because a only needs to send an encrypted [with c's public key] package containing all of those unit certs)
	c verifies that a's certificates are valid
		if they are not, c notifies b and the transaction is over
		if they are, c invalidates them and remints n units, then sends these units to b
	as soon as b recieves the units, the transaction is complete successfully
	
	[problem: deanonymizes b to c]
		we can kind of fix this by just having b send a temporary public key for b along to c along with the initial request (which they get from a, encrypted with c's public key), then having c encrypt the new currency certs with b's temp public key, then send that either as a pulse (no deanonymization but it's really high-usage) or to either of a or b (if to a, then a just relays it on to b; this obviously deanonymizes whoever it gets sent to, but it doesn't use the network)
			alternatively, we can do a sort of local-pulse to not totally deanonymize a or b, but also not use the *entire* network. Basically, c gets a vague idea of where b is in the embedding space and sends the encrypted packet off in that direction. Once the packet gets to that part of the space, we do a proper pulse *only within that space*. The smaller the space, the less network usage, but also the less anonymous it is.
			This local-pulse thing can also be done by picking a nearby (in terms of number of links or embedding distance) scapegoat and telling c to send the message to them (encrypted) when it's ready along with a TTL (or max dist) that's sufficient to get to b. The scapegoat then starts a pulse, limited either by TTL or max distance.